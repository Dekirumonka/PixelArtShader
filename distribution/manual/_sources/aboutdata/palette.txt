==============================================================================================================================
パレットテクスチャ
==============================================================================================================================

パレットテクスチャとは
==============================================================================================================================

| パレットテクスチャはドット絵シェーダーで最も重要な要素です。
| レンダリングに使われる **色** を定義するとともに、照明によってどの部分にどの色が使われるかを定義します。
| 
| パレットテクスチャは設定ファイルからコンバータを使用して出力します。
| このページではパレットテクスチャの詳細と、設定ファイルの書き方、パレットテクスチャの出力方法を解説します。



マテリアル
==============================================================================================================================

| モデルデータ内の全てのポリゴンは、 :doc:`model` を参考に **マテリアル番号** を割り振ります。
| マテリアルは "赤いマフラー" や "白いパンタロン" のように、おおまかな色ごとに設定します。
| そしてマテリアルごとに、"明るい部分はこの色" "暗い部分はこの色" という色を割り振ります。
| 
| パレットテクスチャは "マテリアル番号" と "明るさ" から "色" を決定する変換辞書の役割を持っています。
| 
| 従ってパレットテクスチャを作るには、設定ファイルにマテリアルを2つ以上（1つは背景）記述し、マテリアルに対して明るさと色の関係を記述することになります。
| 
| 
| 例として、sample1/src/palette_debug.png を見てみると、以下のようになっています。

.. image:: sample_palette_debug.png

| 横に3つのマテリアル（黒い背景、緑の箱、青い球）があり、上から下にかけて暗くなっています。



明るさ
==============================================================================================================================

| ドット絵シェーダーでは明るさを大きく3段階に分けて考えています。
| 明るさを 0%（最も暗い）～ 300%（最も明るい） とすると、以下のようになります。

============  ========================================================================================
明るさ        状態
============  ========================================================================================
201% ～ 300%  ポリゴンはメインライトの方向を向いていて、スペキュラーによりとても明るくなっている
101% ～ 200%  ポリゴンはメインライトの方向を向いている
0% ～ 100%    ポリゴンはメインライトに対して裏を向いている
============  ========================================================================================

| 例えば以下のパレットでは、青いマテリアルに対して50%ずつ色を設定してあるのが分かります。

.. image:: sample2_palette_debug.png

| これを青い球に適用し、メインライトを右上から左下に向けてレンダリングしたのが以下の画像です。

.. image:: light00.png

| スペキュラーは切ってあるため、0% ～ 200% までの色が使われているのが分かります。
| ここにスペキュラーを追加すると、以下のようになります。

.. image:: light01.png

| 201% ～ 250% までの色が使われました。
| メインライトの向きを調整すればスペキュラーは更に明るくなり、251% 以上の色も使われるでしょう。



明るさの確認
==============================================================================================================================

| パレットテクスチャを出力するコンバータには明るさ確認のための機能があります。
| この機能を使うと、前節の画像は以下のようになります。
| 
| パレット

.. image:: sample2_palette_debug2.png

| レンダリング結果

.. image:: light02.png

| どの部分がどれくらいの明るさか、というのが確認できます。
| このデータはサンプルデータ2として添付してあります。



設定ファイル
==============================================================================================================================

| パレットテクスチャを出力するには、palette.teco という設定ファイルを用意します。


サンプル
------------------------------------------------------------------------------------------------------------------------------

| 全体の構成は以下のようになります。

.. code-block:: teco

	#include "..\\..\\bin\\MakePaletteTex_common.h"	// 必ず必要な行


	MaxPer 200 + 100	// PerCol命令の最大値を300％とする ※計算式が使える

	MateEdge off	// マテリアルエッジをデフォルトで off にする

	DarkNormal	// ダーク部分の処理をデフォルトで「通常」に設定する


	// マテリアル0番（背景色に固定）
	Material 0			// マテリアル番号指定
	Col 1, 255, 255, 255		// 単色の白


	// マテリアル1番
	Material 1			// マテリアル番号指定
	Col 5,   0, 255,   0		// 5段階の緑
	DarkCol 255, 255, 0		// このマテリアルのダーク部分を黄色に設定する


	// マテリアル2番
	Material 2			// マテリアル番号指定
	PerCol 150,  255,    0,    0	// 明るさが半分以上(150～300%)の部分を赤にする
	PerCol  50, 0x00, 0x00, 0xff	// 明るさが100%～150%の部分を青にする ※16進数表記
	PerColEnd			// 色指定終了（残りの100%は青で埋められる）
	Edge off			// エッジとガターを off にする（デフォルトでマテリアルエッジも off にしてあるので、ダーク部分が存在しなくなる）
	Gutter off


命令
------------------------------------------------------------------------------------------------------------------------------

| 設定ファイル中で使用できる命令は以下の通りです。

	MaxPer int per
		| 明るさを何%までの数字で表すかを指定します。
		| 300を指定するのがいいでしょう。
		| per：明るさの最大%

	Material int num
		| これから記述するマテリアルの番号を指定します。
		| 0番は背景専用です。
		| num：マテリアル番号（0～23）

	PerCol int per, int r, int g, int b
		| マテリアル内の色を1色指定します。
		| この命令を明るい色から順に書くことで、マテリアル内の色を全て指定します。
		| 参考→ PerColEnd
		| per：この色のマテリアルに占める%（参考→ MaxPer）
		| r：赤成分（0～255）
		| g：緑成分（0～255）
		| b：青成分（0～255）
		| ※マテリアル内の全ての per の合計は MaxPer で指定した値以下である必要があります。
		| ※合計が MaxPer に満たない場合、最後に指定した色で埋められます。
		| ※PerCol 命令を続けて書く間に他の命令を書くことはできません。
		| ※他の Col??? 命令と混在できません。

	PerColEnd
		| PerCol 命令の終了を宣言します。
		| PerCol 命令を1行以上書いた後に必ず必要です。

	AdjustRate float rate
		| マテリアル内の色の比率を微調整します。
		| rate = 1.0：調整しない（デフォルト）
		| rate > 1.0：明るい部分を増やす
		| rate < 1.0：暗い部分を増やす
		| ※この命令の直後に書かれた PerCol にのみ影響します。
		| 　従って、PerCol の前の行に書いてください。
		| ※rate の値は、0.7 や 1.5 などを指定します。
		| ※変化具合は出力された ``palette_debug.png`` でご確認ください。

	Col int divNum, int r, int g, int b
		| マテリアルに含まれる全ての色を **簡易的に** 指定します。
		| 指定された分割数に応じて、指定された色を明るくした色と暗くした色が自動的に作られます。
		| 微調整はできません。
		| divNum：分割数
		| r：赤成分（0～255）
		| g：緑成分（0～255）
		| b：青成分（0～255）

	ColGrad int divNum, int r1, int g1, int b1, int r2, int g2, int b2
		| マテリアルに含まれる全ての色を **簡易的に** 指定します。
		| 指定された分割数に応じて、明るい色から暗い色までのグラデーションが自動的に作られます。
		| 微調整はできません。
		| divNum：分割数（2以上）
		| r1：明るい色の赤成分（0～255）
		| g1：明るい色の緑成分（0～255）
		| b1：明るい色の青成分（0～255）
		| r2：暗い色の赤成分（0～255）
		| g2：暗い色の緑成分（0～255）
		| b2：暗い色の青成分（0～255）

	ColMix int divNum
		| マテリアルに含まれる全ての色を **明るさ確認用に** 指定します。
		| 指定された分割数に応じて、様々な色のグラデーションが自動的に作られます。
		| `明るさの確認`_ をご覧ください。
		| divNum：分割数（2以上）

	DarkNormal
		| マテリアルのダーク部分の処理を「通常」に設定します。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります（元からデフォルトなので省略可）。
		| ※ダーク部分とは、種々の条件により暗い色として処理される部分のことです。

	DarkNone
		| マテリアルのダーク部分の処理を「なし」に設定します。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります。

	DarkCol int r, int g, int b
		| マテリアルのダーク部分の処理を「色指定」に設定します。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります。
		| r：赤成分（0～255）
		| g：緑成分（0～255）
		| b：青成分（0～255）

	Edge int flag
		| マテリアルのエッジ処理の on/off を設定します。
		| デフォルトは on です。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります。
		| flag：on か off

	MateEdge int flag
		| マテリアルのマテリアルエッジ処理の on/off を設定します。
		| デフォルトは on です。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります。
		| flag：on か off
		| ※マテリアルエッジとは異なるマテリアル同士の境界部分のことで、手前側のマテリアルにのみ作用します。

	NoEdge int targetMaterialNo, int flag
		| マテリアルの **指定したマテリアルに対しての** エッジを抑制します。
		| デフォルトは 全てのマテリアルに対してoff です。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります。
		| targetMaterialNo：対象となるマテリアル番号
		| flag：on か off
		| ※on にすると、対象マテリアルとの境界部分にエッジ処理がされなくなります。
		| ※複数指定可能です。
		| ※使用例：キャラクターの顔の各パーツを干渉させないようにする

	Gutter int flag
		| マテリアルのガター（溝）処理の on/off を設定します。
		| デフォルトは on です。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります。
		| flag：on か off

	AAThreshold float n
		| マテリアルのAA（アンチエイリアス）処理をする範囲を指定します。
		| デフォルトは 0.5 です。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります。
		| n：0.0（AAなし） ～ 1.0（ほぼ全てのエッジ）

	AASubtracter float n
		| マテリアルのAA（アンチエイリアス）処理の強さを指定します。
		| デフォルトは 1.0 です。
		| 全てのマテリアルよりも前に書くことでデフォルトの設定になります。
		| n：0.0（弱い） ～ 1.0（強い）



出力方法
==============================================================================================================================

| palette.teco と同じフォルダにある MakePaletteTex.bat を実行します。
| palette.teco と同じフォルダには確認用の palette_debug.png が生成され、
| 親フォルダ（.x があるフォルダ）に palette.png が生成されます。
| 
| フォルダの階層構造を変化させると動作しません。
| その場合は palette.teco 内の ``#include`` 及び MakePaletteTex.bat を編集してください。

